# -*- coding: utf-8 -*-
"""
Show matrix by python matplotlib

Verified in Python 2.7

"""

import matplotlib
import platform
if platform.system() == "Linux":
    matplotlib.use('agg')
elif platform.system() == "Darwin":
    matplotlib.use('TkAgg')

import matplotlib.pyplot as plt
import numpy as np

def show_matrix(matrix, sentence1, sentence2, fig_path=None, fig_size=None, with_colorbar=False,
        with_norm=True):
    """ show matrix

    Args:
        matrix:
        sentence1: list of string; should be word list generated by cnn combination
        sentence2: list of string; should be word list generated by cnn combination

    Returns:

    """
    if fig_size is not None:
        fig = plt.figure(figsize=fig_size)
    else:
        fig = plt.figure()
    if with_norm == True:
        im = plt.imshow(matrix, cmap="Blues")
    else:
        im = plt.imshow(matrix, cmap="Blues", norm=matplotlib.colors.NoNorm())
    #plt.matshow(matrix, cmap="Blues")
    x_ticks_pos = np.arange(len(sentence1))
    y_ticks_pos = np.arange(len(sentence2))
    x_ticks_text = sentence1
    y_ticks_text = sentence2
    plt.xticks(x_ticks_pos, x_ticks_text, rotation=70, fontsize=8, fontname='Times New Roman')
    plt.yticks(y_ticks_pos, y_ticks_text, rotation=20, fontsize=8, fontname='Times New Roman')

    fig.tight_layout()
    if with_colorbar == True:
        plt.colorbar(im)

    if fig_path == None:
        plt.show()
    else:
        plt.savefig(fig_path, dpi=300)



def show_vector(vector, sentence, fig_path=None, fig_size=None, with_norm=True):
    """ show 1 * n matrix

    Args:
        vector:
        sentence:
        fig_path:
        with_norm:

    Returns:

    """
    if fig_size is not None:
        fig = plt.figure(figsize=fig_size)
    else:
        fig = plt.figure()
    if with_norm == True:
        im = plt.imshow(np.array([vector]), cmap="Blues")
    else:
        im = plt.imshow(np.array([vector]), cmap="Blues", norm=matplotlib.colors.NoNorm())
    # plt.matshow(matrix, cmap="Blues")
    x_ticks_pos = np.arange(len(sentence))
    x_ticks_text = sentence
    plt.xticks(x_ticks_pos, x_ticks_text, rotation=70, fontsize=8, fontname='Times New Roman')
    plt.yticks([], [])


    fig.tight_layout()

    if fig_path == None:
        plt.show()
    else:
        plt.savefig(fig_path, dpi=300)



if __name__ == "__main__":
    sent_a_origin = ['can', 'i', 'drink', 'greenkalsk', 'tea', 'before', 'sleep']
    sent_b_origin = ['can', 'i', 'drink', 'green', 'tea']
    matrix = np.arange(len(sent_b_origin) * len(sent_a_origin)).reshape(
        (len(sent_b_origin), len(sent_a_origin)))

    show_matrix(matrix, sent_a_origin, sent_b_origin, with_colorbar=True, fig_path="matrix_and_vector_1.png")

    vector = np.arange(len(sent_a_origin))
    show_vector(vector, sent_a_origin, fig_path="matrix_and_vector_2.png")
